package savop;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import static savop.main.FILE_DEPUTADOS;

public class Metodos {

    public static int lerInfoFicheiro(String[][] deputados) throws FileNotFoundException {
        int nDep = 0;
        Scanner fileIn = new Scanner(new File(FILE_DEPUTADOS));
        while (nDep < main.MAX_DEPUTADOS && fileIn.hasNext()) {
            String linha = fileIn.nextLine();
            // System.out.println(linha); ( TESTE )
            if (linha.length() > 0) {
                nDep = guardarDadosDeputado(linha, deputados, nDep);
            }
        }
        // for (int i = 0; i < nDep; i++) {
        //   for (int j = 0; j < deputados[0].length; j++) {
        //          System.out.print(deputados[i][j] + " ");    ( TESTE )
        //     }
        //     System.out.println("\n");
        fileIn.close();
        return nDep;
    }

    /* Este método valida se o Id é composto por 3 letras iniciais e 2 números */
    private static boolean validateId(String id) {
        int i;
        if (id.length() == 5) {
            for (i = 0; i < 2; i++) {
                if (Character.isDigit(id.charAt(i))) {
                    return false;
                }
            }
            if (!Character.isDigit(id.charAt(3)) && !Character.isDigit(id.charAt(4))) {
                return false;
            }
            return true;
        }
        return false;
    }

    public static int guardarDadosDeputado(String linha, String[][] deputados, int nDep) {
        String[] temp = linha.split(";");
        if (temp.length == 4) {
            String id = temp[0].trim();
            if (validateId(id) == true) {
                deputados[nDep][0] = id;
                deputados[nDep][1] = temp[1].trim();
                deputados[nDep][2] = temp[2].trim();
                deputados[nDep][3] = temp[3].trim();
                nDep++;
            } else {
                System.out.println("ID incorreto");
            }
        } else {
            System.out.println("Número de campos incorreto");
        }
        return nDep;
    }

    public static void listPages(String[][] deputados, int nDep, Scanner in) {
        int contPag = 0;
        for (int i = 0; i < nDep; i++) {
            if (i % main.MAX_LINHAS_PAGINA == 0) {
                if (contPag > 0) {
                    pause(in);
                }
                contPag++;
                System.out.println("\nPÁGINA: " + contPag);
                header();
            }
            System.out.printf("%-11s%-31s%-11s%-13s%n", deputados[i][0], deputados[i][1], deputados[i][2], deputados[i][3]);
        }
    }

    private static void header() {
        System.out.printf("/%-10s/%-30s/%-10s/%-12s%n", "ID", "NOME", "PARTIDO", "DATA NASC");
        System.out.println("------------------------------------------------------------------");
    }

    private static void pause(Scanner in) {
        System.out.println("\n\nPrima ENTER para continuar.\n");
        in.nextLine();
    }

    public static boolean atualizarDeputado(String idDeputado, String[][] deputados, int nDep, Scanner in) {
        int pos;
        if ((pos = searchDepByID(idDeputado, nDep, deputados, in)) > -1) {
            System.out.printf("");
            String op;
            do {
                op = menuDadosDeputado(deputados[pos], in);
                switch (op) {
                    case "1":
                        System.out.println("Novo ID:");
                        String newID = in.nextLine();
                        if (validateId(newID) == true) {
                            deputados[pos][0] = newID;
                        } else {
                            System.out.println("Inseriu um ID inválido.");
                        }
                        System.out.println("");
                        break;
                    case "2":
                        System.out.println("Novo nome:");
                        deputados[pos][1] = in.nextLine();
                        System.out.println("");
                        break;
                    case "3":
                        System.out.println("Novo partido:");
                        deputados[pos][2] = in.nextLine();
                        System.out.println("");
                        break;
                    case "4":
                        System.out.println("Nova data:");
                        deputados[pos][3] = in.nextLine();
                        System.out.println("");
                        break;
                    case "0":
                        System.out.println("Atualizações terminadas.");
                        break;
                    default:
                        System.out.println("Opção inválida, por favor insira outra.");
                        System.out.println("");
                        break;
                }
            } while (!"0".equals(op));
        } else {
            System.out.printf("O deputado %s não foi encontrado!", idDeputado);
            System.out.println("");
            return false;
        }
        return true;
    }

    private static String menuDadosDeputado(String[] deputado, Scanner in) {
        System.out.println("Informações atuais do deputado: ");
        System.out.printf("%-11s%-31s%-11s%-13s%n",
                "ID:", "NOME:", "PARTIDO:", "DATA DE NASCIMENTO:");
        System.out.printf("%-11s%-31s%-11s%-13s%n",
                deputado[0], deputado[1], deputado[2], deputado[3]);
        String texto = "Que dado deseja atualizar?"
                + "\n 1 - ID"
                + "\n 2 - Nome"
                + "\n 3 - Partido"
                + "\n 4 - Data de nascimento"
                + "\n 0 - Terminar atualização de informações";
        System.out.printf("%n%s%n", texto);
        String op = in.next();
        in.nextLine();
        return op;
    }

    private static int searchDepByID(String idDeputado, int nDep, String[][] deputados, Scanner in) {
        int pos = -1;
        for (int i = 0; i < nDep; i++) {
            if (deputados[i][0].equalsIgnoreCase(idDeputado)) {
                return i;
            }
        }
        return pos;
    }

    public static String[] readVotesFileInfo(String []votes,String fileName, Scanner in) throws FileNotFoundException {
        int nlinhas = 0;
        Scanner fInput = new Scanner(new File(fileName));
        while (fInput.hasNext() && nlinhas < main.MAX_DEPUTADOS) {
            String line = fInput.nextLine();
            if (line.length() == 6) {
                votes[nlinhas] = line;
                nlinhas++;
            }
        }
        for (int i = 0; i < nlinhas; i++) {
          System.out.println(votes[i]);
        }
        return votes;
    }

    public static void showInfoAlphabet(String depvotes[], String deputados[][], int nDep, Scanner in) {
        int contPag = 0;
        String[] shortnames = new String[nDep];
        String[] votes = new String[nDep];
        for (int i = 0; i < nDep; i++){
            votes[i] = infovotes[i].charAt(5);
        }
        for (int i = 0; i < nDep; i++) {
            if (i % main.MAX_LINHAS_PAGINA == 0) {
                if (contPag > 0) {
                    pause(in);
                }
                contPag++;
                System.out.println("\nPÁGINA: " + contPag);
                header2();
            }
            shortnames[i] = Utilitarios.encontrarNomeApelido(deputados[i][1]);
            //orderAlpha(deputados, nDep, shortnames, votes);
            System.out.printf("%-10s%-20s%-10s%-3s%n", deputados[i][0], shortnames[i], deputados[i][2], votes[i]);
        }
    }

    public static void header2() {
        System.out.printf("/%-10s/%-30s/%-10s/%-12s%n", "ID", "NOME", "PARTIDO", "DATA NASCIMENTO");
        System.out.println("------------------------------------------------------------------");
    }

    public static void showInfoAge(String fileName) {
        fileName = fileName.substring(0, fileName.length() - 4);
        System.out.println("Dados da votação: "+fileName);
        
    }
   public static void changeDate(String date){
        String year = date.substring(0,4);
        String month = date.substring(5,6);
        String day = date.substring(7);
     }
    }

    
    

    //public static void {
    
    //}
    
    
    
    //public static void createPageHTML(String nomeFile, String tituloPag, String[][] votacao, int n) {

    //}

}
